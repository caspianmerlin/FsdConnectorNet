# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Tagged Release

on:
  push:
    tags: [ "v*" ]

jobs:
  build:
    # Arch Matrix
    strategy:
      fail-fast: false
      matrix:
        #arch: [x64, x86, arm, arm64]
        arch: [x64, x86, arm64]
        os: [macos-latest, windows-latest, ubuntu-latest]
        configuration: [Debug, Release]
        include:
          - os: macos-latest
            short-os: osx
          - os: windows-latest
            short-os: win
          - os: ubuntu-latest
            short-os: linux
          - os: ubuntu-latest
            arch: x64
            configuration: Release
            create-nuget-package: True
        exclude:
          #- os: windows-latest
          #  arch: arm
          #- os: windows-latest
          #  arch: arm64
          - os: ubuntu-latest
            arch: x86
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: x86
          #- os: macos-latest
          #  arch: arm
          #- os: macos-latest
          #  arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x.x
      - uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'
      # - name: Build and Test
      #   run: dotnet test --verbosity normal -c ${{ matrix.configuration }} -r ${{ matrix.short-os }}-${{ matrix.arch }} -p:PlatformTarget=${{ matrix.arch }}
      #   if: ${{ matrix.arch != 'x86' }} # Doesn't work on x86 for some reason
      - name: Pack NuGet Package
        if: ${{ matrix.create-nuget-package }}
        # run: dotnet pack AviationCalcUtilNet.csproj --runtime ${{ matrix.short-os }}-${{ matrix.arch }} -c ${{ matrix.configuration }} -o out\nuget --include-symbols -p:RuntimeIdentifier=${{ matrix.short-os }}-${{ matrix.arch }}
        run: dotnet pack FsdConnectorNet/FsdConnectorNet.csproj -o ${{ github.workspace }}/out/nuget --include-symbols
      - name: Archive NuGet Files
        if: ${{ matrix.create-nuget-package }}
        uses: actions/upload-artifact@v3
        with:
          name: FsdConnectorNet-NuGet
          path: |
            ${{ github.workspace }}/out/nuget/*
  # create-github-release:
  #   if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Download Nuget Files
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: AviationCalcUtilNet-NuGet
  #         path: ${{ github.workspace }}/NuGet
  #     - name: Extract Nuget Packages
  #       run: unzip ${{ github.workspace }}/NuGet/*.nupkg -d ${{ github.workspace }}/NuGet
  #     - name: Tar Binaries
  #       run: tar -czvf ${{ github.workspace}}/bins/AviationCalcUtilNet.tar.gz ${{ github.workspace }}/NuGet/lib/*.*
  #     - uses: "marvinpinto/action-automatic-releases@v1.2.1"
  #       with:
  #         repo_token: "${{ secrets.GITHUB_TOKEN }}"
  #         prerelease: false
  #         files: |
  #           ${{ github.workspace}}/bins/*.tar.gz
  upload-nuget-package:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'
      - name: Download NuGet Packages Contents
        uses: actions/download-artifact@v3
        with:
          name: FsdConnectorNet-NuGet
          path: ${{ github.workspace }}/nuget
      - name: Upload NuGet Package
        run: |
          cd ${{ github.workspace }}/nuget
          nuget push *.nupkg -Source 'https://api.nuget.org/v3/index.json' -ApiKey ${{secrets.NUGET_API_KEY}}
